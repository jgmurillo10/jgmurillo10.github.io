{"version":3,"sources":["webpack:///./src/components/PostCard.jsx","webpack:///./src/pages/blog.js"],"names":["PostCardContainer","Link","colors","grey200","blue500","PostCategory","grey600","PostTitle","PostMetas","PostAuthor","PostDate","PostDescription","PostCardAction","PostCard","author","category","date","title","description","uid","className","to","text","RichText","render","format","BlogTitle","BlogGrid","dimensions","maxwidthMobile","Blog","posts","meta","name","content","property","image","concat","Layout","map","post","i","key","node","post_author","post_category","post_title","post_date","post_preview_description","_meta","query","data","prismic","allPosts","edges","site","siteMetadata"],"mappings":"+RAQA,IAAMA,EAAoB,YAAOC,OAAP,sBAAH,oBACDC,IAAOC,QADN,gUAiBRD,IAAOE,QAjBC,yHA6BjBC,EAAe,YAAO,KAAP,sBAAH,yBAEPH,IAAOI,QAFA,KAKZC,EAAY,YAAO,KAAP,sBAAH,sDAKTC,EAAY,YAAO,MAAP,sBAAH,yGAMJN,IAAOI,QANH,KASTG,EAAa,YAAO,MAAP,sBAAH,qCAIVC,EAAW,YAAO,MAAP,sBAAH,qCAIRC,EAAkB,YAAO,MAAP,sBAAH,qFASfC,EAAiB,YAAO,MAAP,sBAAH,iOA+BLC,EAjBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAUC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,MAAOC,EAAlC,EAAkCA,YAAaC,EAA/C,EAA+CA,IAA/C,OACf,YAACnB,EAAD,CAAmBoB,UAAU,eAAeC,GAAE,SAAWF,GACvD,YAACd,EAAD,KAAeU,EAAS,GAAGO,MAC3B,YAACf,EAAD,KAAYU,EAAM,GAAGK,MACrB,YAACX,EAAD,KAAkBY,WAASC,OAAON,IAClC,YAACN,EAAD,CAAgBQ,UAAU,kBAA1B,aACY,8BAEZ,YAACZ,EAAD,KACE,YAACC,EAAD,KAAaK,GACb,YAACJ,EAAD,KACE,YAAC,IAAD,CAAQe,OAAO,gBAAgBT,OCzFvC,IAAMU,EAAY,YAAO,KAAP,sBAAH,6CAITC,EAAW,YAAO,MAAP,sBAAH,mKAUSC,IAAWC,eAVpB,kDAgBRC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACX,8BACE,YAAC,IAAD,CACEf,MAAK,sBACLe,KAAM,CACJ,CACEC,KAAM,cACNC,QAASF,EAAKd,aAEhB,CACEiB,SAAU,WACVD,QAAS,uBAEX,CACEC,SAAU,iBACVD,QAASF,EAAKd,aAEhB,CACEiB,SAAU,UACVD,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASF,EAAKlB,QAEhB,CACEmB,KAAM,gBACNC,QAASF,EAAKf,OAEhB,CACEgB,KAAM,sBACNC,QAASF,EAAKd,aAEhB,CACEiB,SAAU,WACVD,QAASF,EAAKI,OAEhB,CACED,SAAU,gBACVD,QAASF,EAAKI,QAEhBC,OAAOL,KAEX,YAACM,EAAA,EAAD,KACE,YAACZ,EAAD,aACA,YAACC,EAAD,KACGI,EAAMQ,KAAI,SAACC,EAAMC,GAAP,OACT,YAAC,EAAD,CACEC,IAAKD,EACL3B,OAAQ0B,EAAKG,KAAKC,YAClB7B,SAAUyB,EAAKG,KAAKE,cACpB5B,MAAOuB,EAAKG,KAAKG,WACjB9B,KAAMwB,EAAKG,KAAKI,UAChB7B,YAAasB,EAAKG,KAAKK,yBACvB7B,IAAKqB,EAAKG,KAAKM,MAAM9B,aAqBpB+B,GAbE,sBAAc,IAAXC,EAAW,EAAXA,KACVpB,EAAQoB,EAAKC,QAAQC,SAASC,MAC9BtB,EAAOmB,EAAKI,KAAKC,aACvB,OAAKzB,EAEE,YAAC,EAAD,CAAMA,MAAOA,EAAOC,KAAMA,IAFd,MAUA,CAAH","file":"component---src-pages-blog-js-07f52c3d3a58f75a9b8c.js","sourcesContent":["import React from \"react\"\nimport Moment from \"react-moment\"\nimport { Link } from \"gatsby\"\nimport { RichText } from \"prismic-reactjs\"\nimport styled from \"@emotion/styled\"\nimport colors from \"styles/colors\"\nimport PropTypes from \"prop-types\"\n\nconst PostCardContainer = styled(Link)`\n  border: 1px solid ${colors.grey200};\n  padding: 3em 2.5em 2.25em 2.5em;\n  border-radius: 3px;\n  text-decoration: none;\n  color: currentColor;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0px 9px 24px rgba(0, 0, 0, 0.06);\n  transition: all 150ms ease-in-out;\n\n  &:hover {\n    box-shadow: 0px 9px 24px rgba(0, 0, 0, 0.1);\n    transition: all 150ms ease-in-out;\n    cursor: pointer;\n\n    .PostCardAction {\n      color: ${colors.blue500};\n      transition: all 150ms ease-in-out;\n\n      span {\n        transform: translateX(0px);\n        opacity: 1;\n        transition: transform 150ms ease-in-out;\n      }\n    }\n  }\n`\n\nconst PostCategory = styled(\"h6\")`\n  font-weight: 600;\n  color: ${colors.grey600};\n`\n\nconst PostTitle = styled(\"h3\")`\n  margin: 0;\n  margin-top: 0.5em;\n`\n\nconst PostMetas = styled(\"div\")`\n  display: flex;\n  align-items: center;\n  margin-top: 1.5em;\n  justify-content: space-between;\n  font-size: 0.85em;\n  color: ${colors.grey600};\n`\n\nconst PostAuthor = styled(\"div\")`\n  margin: 0;\n`\n\nconst PostDate = styled(\"div\")`\n  margin: 0;\n`\n\nconst PostDescription = styled(\"div\")`\n  margin-top: 2em;\n  margin-bottom: 4em;\n\n  p:last-of-type {\n    margin: 0;\n  }\n`\n\nconst PostCardAction = styled(\"div\")`\n  font-weight: 600;\n  text-decoration: none;\n  color: currentColor;\n  transition: all 150ms ease-in-out;\n\n  span {\n    margin-left: 1em;\n    transform: translateX(-8px);\n    display: inline-block;\n    transition: transform 400ms ease-in-out;\n  }\n`\n\nconst PostCard = ({ author, category, date, title, description, uid }) => (\n  <PostCardContainer className=\"BlogPostCard\" to={`/blog/${uid}`}>\n    <PostCategory>{category[0].text}</PostCategory>\n    <PostTitle>{title[0].text}</PostTitle>\n    <PostDescription>{RichText.render(description)}</PostDescription>\n    <PostCardAction className=\"PostCardAction\">\n      Read more <span>&#8594;</span>\n    </PostCardAction>\n    <PostMetas>\n      <PostAuthor>{author}</PostAuthor>\n      <PostDate>\n        <Moment format=\"MMMM D, YYYY\">{date}</Moment>\n      </PostDate>\n    </PostMetas>\n  </PostCardContainer>\n)\n\nexport default PostCard\n\nPostCard.propTypes = {\n  author: PropTypes.string.isRequired,\n  category: PropTypes.array.isRequired,\n  date: PropTypes.string.isRequired,\n  title: PropTypes.array.isRequired,\n  description: PropTypes.array.isRequired,\n  uid: PropTypes.string.isRequired,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { graphql } from \"gatsby\"\nimport styled from \"@emotion/styled\"\nimport dimensions from \"styles/dimensions\"\nimport Layout from \"components/Layout\"\nimport PostCard from \"components/PostCard\"\n\nconst BlogTitle = styled(\"h1\")`\n  margin-bottom: 1em;\n`\n\nconst BlogGrid = styled(\"div\")`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 2.5em;\n\n  @media (max-width: 1050px) {\n    grid-template-columns: repeat(2, 1fr);\n    grid-gap: 1.5em;\n  }\n\n  @media (max-width: ${dimensions.maxwidthMobile}px) {\n    grid-template-columns: 1fr;\n    grid-gap: 2.5em;\n  }\n`\n\nconst Blog = ({ posts, meta }) => (\n  <>\n    <Helmet\n      title={`Blog | Juan Murillo`}\n      meta={[\n        {\n          name: `description`,\n          content: meta.description,\n        },\n        {\n          property: `og:title`,\n          content: `Blog | Juan Murillo`,\n        },\n        {\n          property: `og:description`,\n          content: meta.description,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: meta.author,\n        },\n        {\n          name: `twitter:title`,\n          content: meta.title,\n        },\n        {\n          name: `twitter:description`,\n          content: meta.description,\n        },\n        {\n          property: `og:image`,\n          content: meta.image,\n        },\n        {\n          property: `twitter:image`,\n          content: meta.image,\n        },\n      ].concat(meta)}\n    />\n    <Layout>\n      <BlogTitle>Blog</BlogTitle>\n      <BlogGrid>\n        {posts.map((post, i) => (\n          <PostCard\n            key={i}\n            author={post.node.post_author}\n            category={post.node.post_category}\n            title={post.node.post_title}\n            date={post.node.post_date}\n            description={post.node.post_preview_description}\n            uid={post.node._meta.uid}\n          />\n        ))}\n      </BlogGrid>\n    </Layout>\n  </>\n)\n\nexport default ({ data }) => {\n  const posts = data.prismic.allPosts.edges\n  const meta = data.site.siteMetadata\n  if (!posts) return null\n\n  return <Blog posts={posts} meta={meta} />\n}\n\nBlog.propTypes = {\n  posts: PropTypes.array.isRequired,\n  meta: PropTypes.object.isRequired,\n}\n\nexport const query = graphql`\n  {\n    prismic {\n      allPosts(sortBy: post_date_DESC) {\n        edges {\n          node {\n            post_title\n            post_date\n            post_category\n            post_preview_description\n            post_author\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        image\n      }\n    }\n  }\n`\n"],"sourceRoot":""}