{"version":3,"file":"component---src-pages-work-js-52869060c21e9d36e0d6.js","mappings":"6NAWA,MAAMA,GAAYC,EAAAA,EAAAA,GAAO,KAAI,CAAAC,OAAA,aAAXD,CAAY,CAAAE,KAAA,UAAAC,OAAA,sBAIxBC,EAAOC,IAAyB,IAAxB,SAAEC,EAAQ,KAAEC,GAAMF,EAE9B,MAAM,EAACG,IAAUC,EAAAA,EAAAA,WAAS,GAE1B,OACEC,EAAAA,EAAAA,IAAAC,EAAAA,SAAA,MACED,EAAAA,EAAAA,IAACE,EAAAA,EAAM,CACLC,MAAK,sBAELN,KAAM,CACJ,CACEL,KAAK,cACLY,QAASP,EAAKQ,aAEhB,CACEC,SAAS,WACTF,QAAQ,uBAEV,CACEE,SAAS,iBACTF,QAASP,EAAKQ,aAEhB,CACEC,SAAS,UACTF,QAAQ,WAEV,CACEZ,KAAK,eACLY,QAAQ,WAEV,CACEZ,KAAK,kBACLY,QAASP,EAAKU,QAEhB,CACEf,KAAK,gBACLY,QAASP,EAAKM,OAEhB,CACEX,KAAK,sBACLY,QAASP,EAAKQ,aAEhB,CACEC,SAAS,WACTF,QAASP,EAAKW,OAEhB,CACEF,SAAS,gBACTF,QAASP,EAAKW,QAEhBC,OAAOZ,MAEXG,EAAAA,EAAAA,IAACU,EAAAA,EAAM,MACLV,EAAAA,EAAAA,IAACX,EAAS,MAACW,EAAAA,EAAAA,IAACW,EAAAA,iBAAgB,CAACC,GAAG,WAChCZ,EAAAA,EAAAA,IAAAC,EAAAA,SAAA,KACGL,EACEiB,QAAOC,GAAWhB,GAAUgB,EAAQC,KAAKC,KAAKC,oBAC9CC,KAAI,CAACJ,EAASK,KACbnB,EAAAA,EAAAA,IAACoB,EAAAA,EAAW,CACVC,IAAKF,EACLG,SAAUR,EAAQC,KAAKC,KAAKO,iBAC5BpB,MAAOW,EAAQC,KAAKC,KAAKQ,cACzBnB,YAAaS,EAAQC,KAAKC,KAAKS,4BAC/BC,UAAWZ,EAAQC,KAAKC,KAAKW,0BAC7BC,IAAKd,EAAQC,KAAKa,UAI1B5B,EAAAA,EAAAA,IAAA,KACE6B,KAAK,sCACLtC,OAAO,SACPuC,IAAI,wBAEJ9B,EAAAA,EAAAA,IAAC+B,EAAAA,EAAM,MAAC/B,EAAAA,EAAAA,IAACW,EAAAA,iBAAgB,CAACC,GAAG,mBAGhC,EAaP,UATkBoB,IAAyB,IAAxB,KAAEhB,EAAI,SAAEiB,GAAUD,EACnC,MAAM,SAAEE,IAAaC,EAAAA,EAAAA,GAAkB,CAAEF,aACnCrC,EAAWoB,EAAKoB,kBAAkBC,MAAMxB,QAAOyB,GAAQA,EAAKvB,KAAKwB,OAASL,EAASM,UACnF3C,EAAOmB,EAAKyB,KAAKC,aACvB,OAAK9C,GAEEI,EAAAA,EAAAA,IAACN,EAAI,CAACE,SAAUA,EAAUC,KAAMA,IAFjB,IAEyB,C","sources":["webpack://jgmurillo10/./src/pages/work.js"],"sourcesContent":["import React, { useState } from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { graphql } from \"gatsby\"\nimport styled from \"@emotion/styled\"\nimport Layout from \"components/Layout\"\nimport ProjectCard from \"components/ProjectCard\"\nimport Button from \"components/_ui/Button\"\nimport { useUpdateLanguage } from \"../hooks/useUpdateLanguage\"\nimport { FormattedMessage } from \"gatsby-plugin-intl\"\n\nconst WorkTitle = styled(\"h1\")`\n  margin-bottom: 1em;\n`\n\nconst Work = ({ projects, meta }) => {\n  // TODO(jgmurillo10): Implement this.\n  const [logged] = useState(false)\n\n  return (\n    <>\n      <Helmet\n        title={`Work | Juan Murillo`}\n        // titleTemplate={`%s | Work | Juan Murillo`}\n        meta={[\n          {\n            name: `description`,\n            content: meta.description,\n          },\n          {\n            property: `og:title`,\n            content: `Work | Juan Murillo`,\n          },\n          {\n            property: `og:description`,\n            content: meta.description,\n          },\n          {\n            property: `og:type`,\n            content: `website`,\n          },\n          {\n            name: `twitter:card`,\n            content: `summary`,\n          },\n          {\n            name: `twitter:creator`,\n            content: meta.author,\n          },\n          {\n            name: `twitter:title`,\n            content: meta.title,\n          },\n          {\n            name: `twitter:description`,\n            content: meta.description,\n          },\n          {\n            property: `og:image`,\n            content: meta.image,\n          },\n          {\n            property: `twitter:image`,\n            content: meta.image,\n          },\n        ].concat(meta)}\n      />\n      <Layout>\n        <WorkTitle><FormattedMessage id=\"work\" /></WorkTitle>\n        <>\n          {projects\n            .filter(project => logged || project.node.data.project_is_public)\n            .map((project, i) => (\n              <ProjectCard\n                key={i}\n                category={project.node.data.project_category}\n                title={project.node.data.project_title}\n                description={project.node.data.project_preview_description}\n                thumbnail={project.node.data.project_preview_thumbnail}\n                uid={project.node.uid}\n              />\n            ))}\n        </>\n        <a\n          href=\"https://forms.gle/x75wbdTKjTZqpywD6\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Button><FormattedMessage id=\"projectsCTA\" /></Button>\n        </a>\n      </Layout>\n    </>\n  )\n}\n\nconst Component = ({ data, location }) => {\n  const { language } = useUpdateLanguage({ location });\n  const projects = data.allPrismicProject.edges.filter(edge => edge.node.lang === language.current);\n  const meta = data.site.siteMetadata\n  if (!projects) return null\n\n  return <Work projects={projects} meta={meta} />\n}\n\nexport default Component;\n\nWork.propTypes = {\n  projects: PropTypes.array.isRequired,\n}\n\nexport const query = graphql`\n  {\n    allPrismicProject {\n      edges {\n        node {\n          lang\n          data {\n            project_title {\n              text\n            }\n            project_preview_description {\n              text\n            }\n            project_preview_thumbnail {\n              url\n            }\n            project_category {\n              text\n            }\n            project_post_date(fromNow: true)\n            project_is_public\n            project_is_featured\n          }\n          uid\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        image\n      }\n    }\n  }\n`\n"],"names":["WorkTitle","_styled","target","name","styles","Work","_ref","projects","meta","logged","useState","___EmotionJSX","React","Helmet","title","content","description","property","author","image","concat","Layout","FormattedMessage","id","filter","project","node","data","project_is_public","map","i","ProjectCard","key","category","project_category","project_title","project_preview_description","thumbnail","project_preview_thumbnail","uid","href","rel","Button","_ref2","location","language","useUpdateLanguage","allPrismicProject","edges","edge","lang","current","site","siteMetadata"],"sourceRoot":""}