{"version":3,"sources":["webpack:///./src/pages/work.js"],"names":["WorkTitle","Work","projects","meta","title","name","content","description","property","author","image","concat","filter","project","node","project_is_public","map","i","key","category","project_category","project_title","project_preview_description","thumbnail","project_preview_thumbnail","uid","_meta","data","prismic","allProjects","edges","site","siteMetadata","query"],"mappings":"uOAQA,IAAMA,EAAY,YAAO,KAAP,sBAAH,6CAITC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,KAAb,OACT,8BACI,YAAC,IAAD,CACIC,MAAK,sBAELD,KAAM,CACF,CACIE,KAAM,cACNC,QAASH,EAAKI,aAElB,CACIC,SAAU,WACVF,QAAS,uBAEb,CACIE,SAAU,iBACVF,QAASH,EAAKI,aAElB,CACIC,SAAU,UACVF,QAAS,WAEb,CACID,KAAM,eACNC,QAAS,WAEb,CACID,KAAM,kBACNC,QAASH,EAAKM,QAElB,CACIJ,KAAM,gBACNC,QAASH,EAAKC,OAElB,CACIC,KAAM,sBACNC,QAASH,EAAKI,aAElB,CACIC,SAAU,WACVF,QAASH,EAAKO,OAElB,CACIF,SAAU,gBACVF,QAASH,EAAKO,QAEpBC,OAAOR,KAEb,YAAC,IAAD,KACI,YAACH,EAAD,aAGA,8BACKE,EAASU,QAAO,SAACC,GAAD,OAAaA,EAAQC,KAAKC,qBAAmBC,KAAI,SAACH,EAASI,GAAV,OAC9D,YAAC,IAAD,CACIC,IAAKD,EACLE,SAAUN,EAAQC,KAAKM,iBACvBhB,MAAOS,EAAQC,KAAKO,cACpBd,YAAaM,EAAQC,KAAKQ,4BAC1BC,UAAWV,EAAQC,KAAKU,0BACxBC,IAAKZ,EAAQC,KAAKY,MAAMD,aAQjC,sBAAc,IAAXE,EAAW,EAAXA,KACRzB,EAAWyB,EAAKC,QAAQC,YAAYC,MACpC3B,EAAOwB,EAAKI,KAAKC,aACvB,OAAK9B,EAGD,YAACD,EAAD,CAAMC,SAAUA,EAAUC,KAAMA,IAHd,MAWnB,IAAM8B,EAAQ,CAAH","file":"component---src-pages-work-js-61a438921726cf3fbc98.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport styled from \"@emotion/styled\";\nimport Layout from \"components/Layout\";\nimport ProjectCard from \"components/ProjectCard\";\n\nconst WorkTitle = styled(\"h1\")`\n    margin-bottom: 1em;\n`\n\nconst Work = ({ projects, meta }) => (\n    <>\n        <Helmet\n            title={`Work | Juan Murillo`}\n            // titleTemplate={`%s | Work | Juan Murillo`}\n            meta={[\n                {\n                    name: `description`,\n                    content: meta.description,\n                },\n                {\n                    property: `og:title`,\n                    content: `Work | Juan Murillo`,\n                },\n                {\n                    property: `og:description`,\n                    content: meta.description,\n                },\n                {\n                    property: `og:type`,\n                    content: `website`,\n                },\n                {\n                    name: `twitter:card`,\n                    content: `summary`,\n                },\n                {\n                    name: `twitter:creator`,\n                    content: meta.author,\n                },\n                {\n                    name: `twitter:title`,\n                    content: meta.title,\n                },\n                {\n                    name: `twitter:description`,\n                    content: meta.description,\n                },\n                {\n                    property: `og:image`,\n                    content: meta.image,\n                },\n                {\n                    property: `twitter:image`,\n                    content: meta.image,\n                },\n            ].concat(meta)}\n        />\n        <Layout>\n            <WorkTitle>\n                Work\n            </WorkTitle>\n            <>\n                {projects.filter((project) => project.node.project_is_public).map((project, i) => (\n                    <ProjectCard\n                        key={i}\n                        category={project.node.project_category}\n                        title={project.node.project_title}\n                        description={project.node.project_preview_description}\n                        thumbnail={project.node.project_preview_thumbnail}\n                        uid={project.node._meta.uid}\n                    />\n                ))}\n            </>\n        </Layout>\n    </>\n);\n\nexport default ({ data }) => {\n    const projects = data.prismic.allProjects.edges;\n    const meta = data.site.siteMetadata;\n    if (!projects) return null;\n\n    return (\n        <Work projects={projects} meta={meta}/>\n    )\n}\n\nWork.propTypes = {\n    projects: PropTypes.array.isRequired,\n};\n\nexport const query = graphql`\n    {\n        prismic {\n            allProjects {\n                edges {\n                    node {\n                        project_title\n                        project_preview_description\n                        project_preview_thumbnail\n                        project_category\n                        project_post_date\n                        project_is_public\n                        _meta {\n                            uid\n                        }\n                    }\n                }\n            }\n        }\n        site {\n            siteMetadata {\n                title\n                description\n                author\n                image\n            }\n        }\n    }\n`\n\n"],"sourceRoot":""}