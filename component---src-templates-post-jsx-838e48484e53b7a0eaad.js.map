{"version":3,"sources":["webpack:///./src/templates/post.jsx"],"names":["PostHeroContainer","PostHeroAnnotation","colors","grey600","PostCategory","PostTitle","PostBody","PostMetas","PostAuthor","PostDate","Post","post","meta","title","post_title","text","titleTemplate","name","content","description","property","author","post_meta_image","url","image","concat","RichText","render","post_category","post_author","format","post_date","post_hero_image","src","alt","post_hero_annotation","post_body","body","data","postContent","prismic","allPosts","edges","node","site","siteMetadata","query"],"mappings":"sRAWA,IAAMA,EAAoB,YAAO,MAAP,qBAAH,0JAajBC,EAAqB,YAAO,MAAP,qBAAH,gDAKXC,IAAOC,QALI,8DAelBC,EAAe,YAAO,MAAP,qBAAH,yEAKPF,IAAOC,QALA,wCAaZE,EAAY,YAAO,MAAP,qBAAH,6FAUTC,EAAW,YAAO,MAAP,qBAAH,0HAcRC,EAAY,YAAO,MAAP,qBAAH,wIAQJL,IAAOC,QARH,KAWTK,EAAa,YAAO,MAAP,qBAAH,qCAIVC,EAAW,YAAO,MAAP,qBAAH,qCAIRC,EAAO,SAAC,GAAmB,IAAjBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACpB,OACE,8BACE,YAAC,IAAD,CACEC,MAAUF,EAAKG,WAAW,GAAGC,KAAxB,UACLC,cAAa,QAAUJ,EAAKC,MAC5BD,KAAM,CACJ,CACEK,KAAM,cACNC,QAASN,EAAKO,aAEhB,CACEC,SAAU,WACVF,QAAYP,EAAKG,WAAW,GAAGC,KAAxB,WAET,CACEK,SAAU,iBACVF,QAASN,EAAKO,aAEhB,CACEC,SAAU,UACVF,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASN,EAAKS,QAEhB,CACEJ,KAAM,gBACNC,QAASN,EAAKC,OAEhB,CACEI,KAAM,sBACNC,QAASN,EAAKO,aAEhB,CACEC,SAAU,WACVF,QAASP,EAAKW,gBAAgBC,KAAOX,EAAKY,OAE5C,CACEJ,SAAU,gBACVF,QAASP,EAAKW,gBAAgBC,KAAOX,EAAKY,QAE5CC,OAAOb,KAEX,YAAC,IAAD,KACE,YAACR,EAAD,KAAesB,WAASC,OAAOhB,EAAKiB,gBACpC,YAACvB,EAAD,KAAYqB,WAASC,OAAOhB,EAAKG,aACjC,YAACP,EAAD,KACE,YAACC,EAAD,KAAaG,EAAKkB,aAClB,YAACpB,EAAD,KACE,YAAC,IAAD,CAAQqB,OAAO,gBAAgBnB,EAAKoB,aAGvCpB,EAAKqB,iBACJ,YAAChC,EAAD,KACE,mBAAKiC,IAAKtB,EAAKqB,gBAAgBT,IAAKW,IAAI,SACxC,YAACjC,EAAD,KACGyB,WAASC,OAAOhB,EAAKwB,wBAI5B,YAAC7B,EAAD,KAAWoB,WAASC,OAAOhB,EAAKyB,YAChC,YAAC,IAAD,CACEC,KAAI,gGAOC,sBAAc,IAAXC,EAAW,EAAXA,KACVC,EAAcD,EAAKE,QAAQC,SAASC,MAAM,GAAGC,KAC7C/B,EAAO0B,EAAKM,KAAKC,aACvB,OAAO,YAACnC,EAAD,CAAMC,KAAM4B,EAAa3B,KAAMA,KAQjC,IAAMkC,EAAQ,CAAH","file":"component---src-templates-post-jsx-838e48484e53b7a0eaad.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport Moment from \"react-moment\"\nimport { graphql } from \"gatsby\"\nimport { RichText } from \"prismic-reactjs\"\nimport styled from \"@emotion/styled\"\nimport colors from \"styles/colors\"\nimport Layout from \"components/Layout\"\nimport Newsletter from \"../components/_ui/Newsletter\"\n\nconst PostHeroContainer = styled(\"div\")`\n  max-height: 500px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  margin-bottom: 3em;\n\n  img {\n    width: 100%;\n  }\n`\n\nconst PostHeroAnnotation = styled(\"div\")`\n  padding-top: 0.25em;\n\n  h6 {\n    text-align: right;\n    color: ${colors.grey600};\n    font-weight: 400;\n    font-size: 0.85rem;\n  }\n\n  a {\n    color: currentColor;\n  }\n`\n\nconst PostCategory = styled(\"div\")`\n  max-width: 550px;\n  margin: 0 auto;\n  text-align: center;\n  font-weight: 600;\n  color: ${colors.grey600};\n\n  h5 {\n    margin-top: 0;\n    margin-bottom: 1em;\n  }\n`\n\nconst PostTitle = styled(\"div\")`\n  max-width: 550px;\n  margin: 0 auto;\n  text-align: center;\n\n  h1 {\n    margin-top: 0;\n  }\n`\n\nconst PostBody = styled(\"div\")`\n  max-width: 550px;\n  margin: 0 auto;\n\n  .block-img {\n    margin-top: 3.5em;\n    margin-bottom: 0.5em;\n\n    img {\n      width: 100%;\n    }\n  }\n`\n\nconst PostMetas = styled(\"div\")`\n  max-width: 550px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  margin-bottom: 2em;\n  justify-content: space-between;\n  font-size: 0.85em;\n  color: ${colors.grey600};\n`\n\nconst PostAuthor = styled(\"div\")`\n  margin: 0;\n`\n\nconst PostDate = styled(\"div\")`\n  margin: 0;\n`\n\nconst Post = ({ post, meta }) => {\n  return (\n    <>\n      <Helmet\n        title={`${post.post_title[0].text} | Blog`}\n        titleTemplate={`%s | ${meta.title}`}\n        meta={[\n          {\n            name: `description`,\n            content: meta.description,\n          },\n          {\n            property: `og:title`,\n            content: `${post.post_title[0].text} | Blog`,\n          },\n          {\n            property: `og:description`,\n            content: meta.description,\n          },\n          {\n            property: `og:type`,\n            content: `website`,\n          },\n          {\n            name: `twitter:card`,\n            content: `summary`,\n          },\n          {\n            name: `twitter:creator`,\n            content: meta.author,\n          },\n          {\n            name: `twitter:title`,\n            content: meta.title,\n          },\n          {\n            name: `twitter:description`,\n            content: meta.description,\n          },\n          {\n            property: `og:image`,\n            content: post.post_meta_image.url || meta.image,\n          },\n          {\n            property: `twitter:image`,\n            content: post.post_meta_image.url || meta.image,\n          },\n        ].concat(meta)}\n      />\n      <Layout>\n        <PostCategory>{RichText.render(post.post_category)}</PostCategory>\n        <PostTitle>{RichText.render(post.post_title)}</PostTitle>\n        <PostMetas>\n          <PostAuthor>{post.post_author}</PostAuthor>\n          <PostDate>\n            <Moment format=\"MMMM D, YYYY\">{post.post_date}</Moment>\n          </PostDate>\n        </PostMetas>\n        {post.post_hero_image && (\n          <PostHeroContainer>\n            <img src={post.post_hero_image.url} alt=\"bees\" />\n            <PostHeroAnnotation>\n              {RichText.render(post.post_hero_annotation)}\n            </PostHeroAnnotation>\n          </PostHeroContainer>\n        )}\n        <PostBody>{RichText.render(post.post_body)}</PostBody>\n        <Newsletter\n          body={`Si te gustó este post agrega tu mail aquí abajo y dale \"Submit\" para mantenerte al tanto`}\n        />\n      </Layout>\n    </>\n  )\n}\n\nexport default ({ data }) => {\n  const postContent = data.prismic.allPosts.edges[0].node\n  const meta = data.site.siteMetadata\n  return <Post post={postContent} meta={meta} />\n}\n\nPost.propTypes = {\n  post: PropTypes.object.isRequired,\n  meta: PropTypes.object.isRequired,\n}\n\nexport const query = graphql`\n  query PostQuery($uid: String) {\n    prismic {\n      allPosts(uid: $uid) {\n        edges {\n          node {\n            post_title\n            post_hero_image\n            post_hero_annotation\n            post_date\n            post_category\n            post_body\n            post_author\n            post_preview_description\n            post_meta_image\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        image\n      }\n    }\n  }\n`\n"],"sourceRoot":""}