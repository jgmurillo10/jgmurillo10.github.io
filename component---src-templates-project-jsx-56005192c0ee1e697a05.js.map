{"version":3,"file":"component---src-templates-project-jsx-56005192c0ee1e697a05.js","mappings":"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","sources":["webpack://jgmurillo10/./src/components/_ui/Button.jsx","webpack://jgmurillo10/./src/templates/project.jsx"],"sourcesContent":["import React, { Component } from \"react\"\nimport styled from \"@emotion/styled\"\nimport colors from \"./../../styles/colors\"\nimport dimensions from \"./../../styles/dimensions\"\n\nconst ButtonContainer = styled(\"button\")`\n  padding: 1em 2em;\n  background: ${colors.blue400};\n  font-weight: 600;\n  color: white;\n  outline: none;\n  border: none;\n  font-size: 1rem;\n  border-radius: 2px;\n  position: relative;\n  transition: background 100ms ease-in-out;\n\n  @media (max-width: ${dimensions.maxwidthMobile}px) {\n    padding: 0.8em 1.8em;\n    font-size: 1em;\n  }\n\n  p {\n    margin: 0;\n  }\n\n  &:before {\n    content: \"\";\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(\n      135deg,\n      ${colors.pink400} 0%,\n      ${colors.purple400} 100%\n    );\n    z-index: -1;\n  }\n\n  &:hover {\n    cursor: pointer;\n    background: transparent;\n    transition: background 100ms ease-in-out;\n  }\n\n  &.Button--secondary {\n    background: ${colors.blue200};\n    color: ${colors.blue600};\n    padding: 0.95em 1.8em;\n    font-size: 0.95rem;\n\n    &:hover {\n      background: ${colors.blue300};\n      transition: background 100ms ease-in-out;\n    }\n  }\n`\n\nclass Button extends Component {\n  render() {\n    const { children, ...props } = this.props\n    return (\n      <ButtonContainer onClick={this.props.onClick} {...props}>\n        {this.props.children}\n      </ButtonContainer>\n    )\n  }\n}\n\nexport default Button\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport styled from \"@emotion/styled\"\nimport colors from \"styles/colors\"\nimport { graphql } from \"gatsby\"\nimport { PrismicRichText } from \"@prismicio/react\"\nimport Button from \"components/_ui/Button\"\nimport Layout from \"components/Layout\"\nimport Newsletter from \"../components/_ui/Newsletter\"\nimport { useUpdateLanguage } from \"../hooks/useUpdateLanguage\"\nimport { useIntl, FormattedMessage, Link } from \"gatsby-plugin-intl\"\n\nconst ProjectHeroContainer = styled(\"div\")`\n  background: ${colors.grey200};\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n  overflow: hidden;\n  position: relative;\n  padding-top: 2.25em;\n  margin-bottom: 3.5em;\n\n  img {\n    max-width: 600px;\n  }\n`\n\nconst ProjectTitle = styled(\"div\")`\n  max-width: 550px;\n  margin: 0 auto;\n  text-align: center;\n`\n\nconst ProjectBody = styled(\"div\")`\n  max-width: 550px;\n  margin: 0 auto;\n\n  .block-img {\n    margin-top: 3.5em;\n    margin-bottom: 0.5em;\n\n    img {\n      width: 100%;\n    }\n  }\n`\n\nconst WorkLink = styled(Link)`\n  margin-top: 3em;\n  display: block;\n  text-align: center;\n`\n\nconst StackPill = styled(\"span\")`\n  background-color: #f2f2f2;\n  border-radius: 32px;\n  margin: 8px;\n  padding: 8px 16px;\n`\n\nconst ProjectStack = styled(\"div\")`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 24px 0;\n  justify-content: center;\n`\n\nconst Project = ({ project, meta }) => {\n  const { formatMessage } = useIntl();\n  return (\n    <>\n      <Helmet\n        title={`${project.project_title.text} | Projects`}\n        titleTemplate={`%s | ${meta.title}`}\n        meta={[\n          {\n            name: `description`,\n            content: meta.description,\n          },\n          {\n            property: `og:title`,\n            content: `${project.project_title.text} | Projects`,\n          },\n          {\n            property: `og:description`,\n            content: meta.description,\n          },\n          {\n            property: `og:type`,\n            content: `website`,\n          },\n          {\n            name: `twitter:card`,\n            content: `summary`,\n          },\n          {\n            name: `twitter:creator`,\n            content: meta.author,\n          },\n          {\n            name: `twitter:title`,\n            content: meta.title,\n          },\n          {\n            name: `twitter:description`,\n            content: meta.description,\n          },\n          {\n            property: `og:image`,\n            content: meta.image,\n          },\n          {\n            property: `twitter:image`,\n            content: meta.image,\n          },\n        ].concat(meta)}\n      />\n      <Layout>\n        <ProjectTitle><PrismicRichText field={project.project_title.richText} /></ProjectTitle>\n        <ProjectStack>\n          {project.stack.map(({ technology }) => (\n            <StackPill key={technology.text}>{technology.text}</StackPill>\n          ))}\n        </ProjectStack>\n        {project.project_hero_image && (\n          <ProjectHeroContainer>\n            <img src={project.project_hero_image.url} alt=\"bees\" />\n          </ProjectHeroContainer>\n        )}\n        <ProjectBody>\n          <PrismicRichText field={project.project_description.richText} />\n          <WorkLink to={\"/work\"}>\n            <Button className=\"Button--secondary\"><FormattedMessage id=\"moreWork\" /></Button>\n          </WorkLink>\n        </ProjectBody>\n        <Newsletter\n          body={formatMessage({ id: \"subscribeDescription\" })}\n        />\n      </Layout>\n    </>\n  )\n}\n\nconst Component = ({ data, location }) => {\n  const { language } = useUpdateLanguage({ location })\n  const projectContent = data.allPrismicProject.edges.find(edge => edge.node.lang === language.current)?.node.data;\n  const meta = data.site.siteMetadata\n  return <Project project={projectContent || data.allPrismicProject.edges[0].node.data} meta={meta} />\n}\n\nexport default Component;\n\nProject.propTypes = {\n  project: PropTypes.object.isRequired,\n}\n\nexport const query = graphql`\n  query ProjectQuery($uid: String) {\n    allPrismicProject(filter: { uid: { eq: $uid } }) {\n      edges {\n        node {\n          uid\n          lang\n          alternate_languages {\n            lang\n            document {\n              ... on PrismicProject {\n                url\n              }\n            }\n          }\n          data {\n            project_title {\n              text\n              richText\n            }\n            project_preview_description {\n              text\n            }\n            project_preview_thumbnail {\n              url\n            }\n            project_category {\n              text\n            }\n            project_post_date(fromNow: true)\n            project_is_public\n            project_is_featured\n            project_hero_image {\n              url\n            }\n            project_description {\n              richText\n            }\n            stack {\n              technology {\n                text\n              }\n            }\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        image\n      }\n    }\n  }\n`\n"],"names":["ButtonContainer","_styled","target","colors","blue400","dimensions","maxwidthMobile","pink400","purple400","blue200","blue600","blue300","Button","_Component","apply","arguments","_inheritsLoose","prototype","render","children","props","this","___EmotionJSX","_extends","onClick","Component","ProjectHeroContainer","grey200","ProjectTitle","name","styles","ProjectBody","WorkLink","Link","StackPill","ProjectStack","Project","_ref","project","meta","formatMessage","useIntl","React","Helmet","title","project_title","text","titleTemplate","content","description","property","author","image","concat","Layout","PrismicRichText","field","richText","stack","map","_ref2","technology","key","project_hero_image","src","url","alt","project_description","to","className","FormattedMessage","id","Newsletter","body","_ref3","_data$allPrismicProje","data","location","language","useUpdateLanguage","projectContent","allPrismicProject","edges","find","edge","node","lang","current","site","siteMetadata"],"sourceRoot":""}