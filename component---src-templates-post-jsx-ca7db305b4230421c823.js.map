{"version":3,"file":"component---src-templates-post-jsx-ca7db305b4230421c823.js","mappings":"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","sources":["webpack://jgmurillo10/./src/templates/post.jsx","webpack://jgmurillo10/./src/utils/blog.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { graphql } from \"gatsby\"\nimport { PrismicRichText } from \"@prismicio/react\"\nimport styled from \"@emotion/styled\"\nimport colors from \"styles/colors\"\nimport Layout from \"components/Layout\"\nimport Newsletter from \"../components/_ui/Newsletter\"\nimport { useIntl } from \"gatsby-plugin-intl\";\nimport { Head as HeadBase } from \"../components/Head\";\nimport { usePost } from \"../hooks/useGetEntity\"\nimport { getReadingTime } from \"../utils/blog\"\n\nconst PostHeroContainer = styled(\"div\")`\n  max-height: 500px;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  margin-bottom: 3em;\n\n  img {\n    width: 100%;\n  }\n`\n\nconst PostHeroAnnotation = styled(\"div\")`\n  padding-top: 0.25em;\n\n  h6 {\n    text-align: right;\n    color: ${colors.grey600};\n    font-weight: 400;\n    font-size: 0.85rem;\n  }\n\n  a {\n    color: currentColor;\n  }\n`\n\nconst PostCategory = styled(\"div\")`\n  max-width: 550px;\n  margin: 0 auto;\n  text-align: center;\n  font-weight: 600;\n  color: ${colors.grey600};\n\n  h5 {\n    margin-top: 0;\n    margin-bottom: 1em;\n  }\n`\n\nconst PostTitle = styled(\"div\")`\n  margin: 0 auto;\n  text-align: center;\n\n  h1 {\n    margin-top: 0;\n  }\n`\n\nconst PostBody = styled(\"div\")`\n  max-width: 768px;\n  margin: 0 auto;\n\n  .block-img {\n    margin-top: 3.5em;\n    margin-bottom: 0.5em;\n\n    img {\n      width: 100%;\n    }\n  }\n`\n\nconst PostMetas = styled(\"div\")`\n  max-width: 550px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  margin-bottom: 2em;\n  justify-content: space-between;\n  font-size: 0.85em;\n  color: ${colors.grey600};\n`\n\nconst PostAuthor = styled(\"div\")`\n  margin: 0;\n`\n\nconst PostDate = styled(\"div\")`\n  margin: 0;\n`\n\nexport const Head = ({ data, location }) => {\n  const { post } = usePost({ data, location });\n\n  return (\n    <HeadBase\n      title={post.post_title.text + ' | Blog | Juan Murillo'}\n      description={post.post_preview_description.text}\n      image={post.post_meta_image.url}\n    />\n  )\n}\n\nconst Post = ({ post }) => {\n  const { formatMessage } = useIntl();\n  const { minutes } = getReadingTime(post.post_body.text);\n\n  return (\n    <Layout>\n      <PostCategory><PrismicRichText field={post.post_category.richText} /></PostCategory>\n      <PostTitle><PrismicRichText field={post.post_title.richText} /></PostTitle>\n      <PostMetas>\n        <PostAuthor>{post.post_author}</PostAuthor>\n        <PostDate>\n          {post.post_date}\n        </PostDate>\n        <p>{minutes} min</p>\n      </PostMetas>\n      {post.post_hero_image && (\n        <PostHeroContainer>\n          <img src={post.post_hero_image.url} alt=\"bees\" />\n          <PostHeroAnnotation>\n            <PrismicRichText field={post.post_hero_annotation.richText} />\n          </PostHeroAnnotation>\n        </PostHeroContainer>\n      )}\n      <PostBody><PrismicRichText field={post.post_body.richText} /></PostBody>\n      <Newsletter\n        body={formatMessage({ id: \"newsletter\" })}\n      />\n    </Layout>\n  )\n}\n\nconst Component = ({ data, location }) => {\n  const { post } = usePost({ data, location })\n\n  return <Post post={post} />\n}\n\nexport default Component;\n\nPost.propTypes = {\n  post: PropTypes.object.isRequired,\n}\n\nexport const query = graphql`\n  query PostQuery($uid: String) {\n    allPrismicPost(filter: { uid: { eq: $uid } }) {\n      edges {\n        node {\n          id\n          uid\n          lang\n          alternate_languages {\n            lang\n            document {\n              ... on PrismicPost {\n                url\n              }\n            }\n          }\n          data {\n            post_author\n            post_title {\n              richText\n              text\n            }\n            post_hero_annotation {\n              richText\n            }\n            post_hero_image {\n              url\n            }\n            post_meta_image {\n              url\n            }\n            post_date(fromNow: true)\n            post_category {\n              richText\n            }\n            post_preview_description {\n              text\n            }\n            post_body {\n              richText\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n`\n","export const getReadingTime = (text, wordsPerMinute = 200) => {\n  const words = text.split(' ').length;\n  \n  return {\n    words,\n    minutes: Math.ceil(words/wordsPerMinute),\n  };\n}\n"],"names":["PostHeroContainer","_styled","target","name","styles","PostHeroAnnotation","colors","grey600","PostCategory","PostTitle","PostBody","PostMetas","PostAuthor","PostDate","Head","_ref","data","location","post","usePost","___EmotionJSX","HeadBase","title","post_title","text","description","post_preview_description","image","post_meta_image","url","Post","_ref2","formatMessage","useIntl","minutes","wordsPerMinute","words","split","length","Math","ceil","getReadingTime","post_body","Layout","PrismicRichText","field","post_category","richText","post_author","post_date","post_hero_image","src","alt","post_hero_annotation","Newsletter","body","id","_ref3"],"sourceRoot":""}