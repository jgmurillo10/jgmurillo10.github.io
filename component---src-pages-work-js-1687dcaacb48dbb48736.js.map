{"version":3,"sources":["webpack:///./src/pages/work.js"],"names":["WorkTitle","Work","projects","meta","logged","useState","title","name","content","description","property","author","image","concat","href","target","rel","filter","project","node","project_is_public","map","i","key","category","project_category","project_title","project_preview_description","thumbnail","project_preview_thumbnail","uid","_meta","data","prismic","allProjects","edges","site","siteMetadata","query"],"mappings":"mPASA,IAAMA,EAAY,YAAO,KAAP,sBAAH,6CAITC,EAAO,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAEjBC,EAAUC,oBAAS,GAFS,GAInC,OACE,8BACE,YAAC,IAAD,CACEC,MAAK,sBAELH,KAAM,CACJ,CACEI,KAAM,cACNC,QAASL,EAAKM,aAEhB,CACEC,SAAU,WACVF,QAAS,uBAEX,CACEE,SAAU,iBACVF,QAASL,EAAKM,aAEhB,CACEC,SAAU,UACVF,QAAS,WAEX,CACED,KAAM,eACNC,QAAS,WAEX,CACED,KAAM,kBACNC,QAASL,EAAKQ,QAEhB,CACEJ,KAAM,gBACNC,QAASL,EAAKG,OAEhB,CACEC,KAAM,sBACNC,QAASL,EAAKM,aAEhB,CACEC,SAAU,WACVF,QAASL,EAAKS,OAEhB,CACEF,SAAU,gBACVF,QAASL,EAAKS,QAEhBC,OAAOV,KAEX,YAAC,IAAD,KACE,iBACEW,KAAK,sCACLC,OAAO,SACPC,IAAI,uBAEJ,YAAC,IAAD,+BAEF,YAAChB,EAAD,aACA,8BACGE,EACEe,QAAO,SAAAC,GAAO,OAAId,GAAUc,EAAQC,KAAKC,qBACzCC,KAAI,SAACH,EAASI,GAAV,OACH,YAAC,IAAD,CACEC,IAAKD,EACLE,SAAUN,EAAQC,KAAKM,iBACvBnB,MAAOY,EAAQC,KAAKO,cACpBjB,YAAaS,EAAQC,KAAKQ,4BAC1BC,UAAWV,EAAQC,KAAKU,0BACxBC,IAAKZ,EAAQC,KAAKY,MAAMD,aASzB,sBAAc,IAAXE,EAAW,EAAXA,KACV9B,EAAW8B,EAAKC,QAAQC,YAAYC,MACpChC,EAAO6B,EAAKI,KAAKC,aACvB,OAAKnC,EAEE,YAACD,EAAD,CAAMC,SAAUA,EAAUC,KAAMA,IAFjB,MASjB,IAAMmC,EAAQ,CAAH","file":"component---src-pages-work-js-1687dcaacb48dbb48736.js","sourcesContent":["import React, { useState } from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { graphql } from \"gatsby\"\nimport styled from \"@emotion/styled\"\nimport Layout from \"components/Layout\"\nimport ProjectCard from \"components/ProjectCard\"\nimport Button from \"components/_ui/Button\"\n\nconst WorkTitle = styled(\"h1\")`\n  margin-bottom: 1em;\n`\n\nconst Work = ({ projects, meta }) => {\n  // TODO(jgmurillo10): Implement this.\n  const [logged] = useState(false)\n\n  return (\n    <>\n      <Helmet\n        title={`Work | Juan Murillo`}\n        // titleTemplate={`%s | Work | Juan Murillo`}\n        meta={[\n          {\n            name: `description`,\n            content: meta.description,\n          },\n          {\n            property: `og:title`,\n            content: `Work | Juan Murillo`,\n          },\n          {\n            property: `og:description`,\n            content: meta.description,\n          },\n          {\n            property: `og:type`,\n            content: `website`,\n          },\n          {\n            name: `twitter:card`,\n            content: `summary`,\n          },\n          {\n            name: `twitter:creator`,\n            content: meta.author,\n          },\n          {\n            name: `twitter:title`,\n            content: meta.title,\n          },\n          {\n            name: `twitter:description`,\n            content: meta.description,\n          },\n          {\n            property: `og:image`,\n            content: meta.image,\n          },\n          {\n            property: `twitter:image`,\n            content: meta.image,\n          },\n        ].concat(meta)}\n      />\n      <Layout>\n        <a\n          href=\"https://forms.gle/x75wbdTKjTZqpywD6\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <Button>View private projects</Button>\n        </a>\n        <WorkTitle>Work</WorkTitle>\n        <>\n          {projects\n            .filter(project => logged || project.node.project_is_public)\n            .map((project, i) => (\n              <ProjectCard\n                key={i}\n                category={project.node.project_category}\n                title={project.node.project_title}\n                description={project.node.project_preview_description}\n                thumbnail={project.node.project_preview_thumbnail}\n                uid={project.node._meta.uid}\n              />\n            ))}\n        </>\n      </Layout>\n    </>\n  )\n}\n\nexport default ({ data }) => {\n  const projects = data.prismic.allProjects.edges\n  const meta = data.site.siteMetadata\n  if (!projects) return null\n\n  return <Work projects={projects} meta={meta} />\n}\n\nWork.propTypes = {\n  projects: PropTypes.array.isRequired,\n}\n\nexport const query = graphql`\n  {\n    prismic {\n      allProjects {\n        edges {\n          node {\n            project_title\n            project_preview_description\n            project_preview_thumbnail\n            project_category\n            project_post_date\n            project_is_public\n            _meta {\n              uid\n            }\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        description\n        author\n        image\n      }\n    }\n  }\n`\n"],"sourceRoot":""}